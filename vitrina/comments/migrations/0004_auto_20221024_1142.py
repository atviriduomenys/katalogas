# Generated by Django 3.2.16 on 2022-10-24 08:42

import django.db.models.deletion
from django.db import migrations, models
from django.db.models import Min

from vitrina import settings


def create_comments_for_datasets(apps, schema_editor):
    Comment = apps.get_model('vitrina_comments', 'Comment')
    Dataset = apps.get_model('vitrina_datasets', 'Dataset')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    DatasetEvent = apps.get_model('vitrina_datasets', 'DatasetEvent')
    User = apps.get_model('vitrina_users', 'User')

    sys_user = User.objects.get(email=settings.SYSTEM_USER_EMAIL)
    ct = ContentType.objects.get_for_model(Dataset)

    qs = (
        Dataset.objects.
        values(
            'id',
            'created',
        ).
        annotate(
            opened=Min('datasetdistribution__created'),
            structured=Min('datasetstructure__created'),
        )
    )

    for dataset in qs:
        user = sys_user
        event_qs = (
            DatasetEvent.objects.
            filter(dataset_id=dataset['id'], type="CREATED")
        )
        if event_qs.exists():
            create_event = event_qs.first()
            if create_event.user_0:
                user = create_event.user_0

        if dataset['created']:
            Comment.objects.create(
                created=dataset['created'],
                content_type=ct,
                object_id=dataset['id'],
                user=user,
                type="STATUS",
                status="INVENTORED"
            )

        if dataset['structured']:
            Comment.objects.create(
                created=dataset['structured'],
                content_type=ct,
                object_id=dataset['id'],
                user=user,
                type="STATUS",
                status="STRUCTURED"
            )

        if dataset['opened']:
            Comment.objects.create(
                created=dataset['opened'],
                content_type=ct,
                object_id=dataset['id'],
                user=user,
                type="STATUS",
                status="OPENED"
            )


if __name__ == '__main__':
    import os
    import django

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "vitrina.settings")
    django.setup()

    from django.contrib.contenttypes.models import ContentType
    from vitrina.comments.models import Comment
    from vitrina.datasets.models import Dataset
    from vitrina.datasets.models import DatasetEvent
    from vitrina.resources.models import DatasetDistribution
    from vitrina.users.models import User

    class Apps:
        models = {
            'vitrina_comments': {
                'Comment': Comment,
            },
            'vitrina_datasets': {
                'Dataset': Dataset,
                'DatasetEvent': DatasetEvent,
            },
            'vitrina_resources': {
                'DatasetDistribution': DatasetDistribution,
            },
            'contenttypes': {
                'ContentType': ContentType,
            },
            'vitrina_users': {
                'User': User,
            },
        }

        def get_model(self, module, model):
            return self.models[module][model]

    ct = ContentType.objects.get_for_model(Dataset)
    Comment.objects.filter(content_type=ct).delete()

    apps = Apps()
    schema_editor = None
    create_comments_for_datasets(apps, schema_editor)


def create_comments_for_requests(apps, schema_editor):
    Comment = apps.get_model('vitrina_comments', 'Comment')
    RequestEvent = apps.get_model('vitrina_requests', 'RequestEvent')
    Request = apps.get_model('vitrina_requests', 'Request')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Dataset = apps.get_model('vitrina_datasets', 'Dataset')
    User = apps.get_model('vitrina_users', 'User')

    sys_user = User.objects.get(email=settings.SYSTEM_USER_EMAIL)
    ct = ContentType.objects.get_for_model(Request)

    for event in RequestEvent.objects.all():
        if event.request.user:
            user = event.request.user
        else:
            user = sys_user

        if event.type == "APPROVED":
            Comment.objects.create(
                created=event.created,
                content_type=ct,
                object_id=event.request.pk,
                user=user,
                type="STATUS",
                status="APPROVED"
            )
        elif event.type == "REJECTED":
            Comment.objects.create(
                created=event.created,
                content_type=ct,
                object_id=event.request.pk,
                user=user,
                type="STATUS",
                status="REJECTED"
            )
        elif event.type == "STATUS_CHANGED":
            created = event.created
            if event.request.dataset_id:
                dataset = Dataset.objects.get(pk=event.request.dataset_id)
                if dataset.datasetdistribution_set.exists():
                    created = dataset.datasetdistribution_set.first().created

            Comment.objects.create(
                created=created,
                content_type=ct,
                object_id=event.request.pk,
                user=user,
                type="STATUS",
                status="OPENED"
            )


def create_comments_for_dataset_projects(apps, schema_editor):
    Comment = apps.get_model('vitrina_comments', 'Comment')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Project = apps.get_model('vitrina_projects', 'Project')
    Dataset = apps.get_model('vitrina_datasets', 'Dataset')
    UsecaseDatasetIds = apps.get_model('vitrina_projects', 'UsecaseDatasetIds')
    User = apps.get_model('vitrina_users', 'User')

    sys_user = User.objects.get(email=settings.SYSTEM_USER_EMAIL)
    dataset_ct = ContentType.objects.get_for_model(Dataset)
    project_ct = ContentType.objects.get_for_model(Project)

    for usecase_dataset in UsecaseDatasetIds.objects.all():
        dataset = Dataset.objects.get(pk=usecase_dataset.dataset_ids)
        project = Project.objects.get(pk=usecase_dataset.usecase_id)
        if project.user:
            user = project.user
        else:
            user = sys_user

        Comment.objects.create(
            created=project.created,
            content_type=dataset_ct,
            object_id=dataset.pk,
            rel_content_type=project_ct,
            rel_object_id=project.pk,
            user=user,
            type="PROJECT",
        )


def create_comments_for_dataset_requests(apps, schema_editor):
    Comment = apps.get_model('vitrina_comments', 'Comment')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Request = apps.get_model('vitrina_requests', 'Request')
    Dataset = apps.get_model('vitrina_datasets', 'Dataset')
    User = apps.get_model('vitrina_users', 'User')

    sys_user = User.objects.get(email=settings.SYSTEM_USER_EMAIL)
    dataset_ct = ContentType.objects.get_for_model(Dataset)
    request_ct = ContentType.objects.get_for_model(Request)

    for request in Request.objects.all():
        if request.user:
            user = request.user
        else:
            user = sys_user
        if request.dataset_id:
            Comment.objects.create(
                created=request.created,
                content_type=dataset_ct,
                object_id=request.dataset_id,
                rel_content_type=request_ct,
                rel_object_id=request.pk,
                user=user,
                type="REQUEST",
            )


class Migration(migrations.Migration):

    dependencies = [
        ('vitrina_comments', '0003_auto_20221024_1113'),
        ('vitrina_orgs', '0013_auto_20221014_0904'),
        ('vitrina_datasets', '0003_auto_20220905_0914'),
        ('vitrina_resources', '0001_initial'),
        ('vitrina_users', '0006_auto_20221027_1109'),
        ('vitrina_projects', '0001_initial')
    ]

    operations = [
        migrations.AlterField(
            model_name='comment',
            name='parent_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='vitrina_comments.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='status',
            field=models.CharField(blank=True,
                                   choices=[('INVENTORED', 'Inventorintas'), ('STRUCTURED', 'Įkelta duomenų struktūra'),
                                            ('OPENED', 'Atvertas'), ('APPROVED', 'Patvirtintas'),
                                            ('REJECTED', 'Atmestas')], max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='type',
            field=models.CharField(choices=[('USER', 'Naudotojo komentaras'),
                                            ('REQUEST', 'Prašymo atverti duomenis komentaras'),
                                            ('PROJECT', 'Duomenų rinkinio įtraukimo į projektą komentaras'),
                                            ('STATUS', 'Statuso keitimo komentaras')], max_length=255, default='USER'),
        ),
        migrations.RunPython(create_comments_for_datasets),
        migrations.RunPython(create_comments_for_requests),
        migrations.RunPython(create_comments_for_dataset_projects),
        migrations.RunPython(create_comments_for_dataset_requests),
    ]
