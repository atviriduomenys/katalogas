# Generated by Django 3.2.25 on 2024-10-08 08:38

from django.db import migrations


def update_user_roles(apps, schema_editor):
    Representative = apps.get_model('vitrina_orgs', 'Representative')
    Organization = apps.get_model('vitrina_orgs', 'Organization')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    User = apps.get_model('vitrina_users', 'User')

    if user := User.objects.filter(email="marius.arminas@stat.gov.lt").first():
        organization_roles = user.representative_set.filter(
            content_type=ContentType.objects.get_for_model(Organization)
        )
        for role in organization_roles:
            organization = Organization.objects.filter(pk=role.object_id).first()
            if organization and organization.title != "Valstybės duomenų agentūra":
                organization_datasets = organization.dataset_set.all()
                if len(organization_datasets) == 1:
                    dataset = organization_datasets.first()
                    if dataset and not Representative.objects.filter(
                        content_type=ContentType.objects.get_for_model(dataset),
                        object_id=dataset.pk,
                        user=user
                    ):
                        Representative.objects.create(
                            user=user,
                            email=user.email,
                            content_type=ContentType.objects.get_for_model(dataset),
                            object_id=dataset.pk,
                            role=role.role,
                            phone=role.phone,
                            has_api_access=role.has_api_access
                        )
                else:
                    for dataset in organization_datasets:
                        if not Representative.objects.filter(
                            content_type=ContentType.objects.get_for_model(dataset),
                            object_id=dataset.pk,
                            email__icontains="stat.gov.lt"
                        ):
                            Representative.objects.create(
                                user=user,
                                email=user.email,
                                content_type=ContentType.objects.get_for_model(dataset),
                                object_id=dataset.pk,
                                role=role.role,
                                phone=role.phone,
                                has_api_access=role.has_api_access
                            )
                role.delete()

    if user := User.objects.filter(email="mantas.zimnickas@ivpk.lt").first():
        organization_roles = user.representative_set.filter(
            content_type=ContentType.objects.get_for_model(Organization)
        )
        for role in organization_roles:
            organization = Organization.objects.filter(pk=role.object_id).first()
            if organization and not organization.title:
                role.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('vitrina_orgs', '0028_auto_20240828_0812'),
        ('vitrina_users', '0011_auto_20240917_0926'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.RunPython(update_user_roles),
    ]
