# Generated by Django 3.2.16 on 2022-10-07 11:39
import mimetypes
from django.db import migrations, models
import django.db.models.deletion


def delete_resources_with_dataset_null(apps, schema_editor):
    DatasetDistribution = apps.get_model("vitrina_resources", "DatasetDistribution")

    for resource in DatasetDistribution.objects.all():
        if not resource.dataset:
            resource.delete()


def remake_region_and_municipality(apps, schema_editor):
    DatasetDistribution = apps.get_model("vitrina_resources", "DatasetDistribution")
    Region = apps.get_model("vitrina_orgs", "Region")
    Municipality = apps.get_model("vitrina_orgs", "Municipality")

    for resource in DatasetDistribution.objects.all():
        if resource.region_old:
            region = Region.objects.filter(title=resource.region_old).first()
            resource.region = region
        if resource.municipality_old:
            municipality = Municipality.objects.filter(title=resource.municipality_old).first()
            resource.municipality = municipality
        resource.save(update_fields=['region', 'municipality'])


def generate_mimetype_for_format_table(apps, schema_editor):
    Format = apps.get_model("vitrina_resources", "Format")

    for format in Format.objects.all():
        mimetype = mimetypes.guess_type('file.' + format.extension)
        format.mimetype = mimetype
        format.save(update_fields=['mimetype'])


def fix_type_field_for_files(apps, schema_editor):
    DatasetDistribution = apps.get_model("vitrina_resources", "DatasetDistribution")
    Format = apps.get_model("vitrina_resources", "Format")

    for resource in DatasetDistribution.objects.all():
        if resource.file:
            mime_type = mimetypes.guess_type(resource.file)
            detected_format = Format.objects.filter(mimetype=mime_type).first()
            resource.format = detected_format
        if resource.type == 'URL':
            url_format = Format.objects.filter(extension='URL').first()
            resource.format = url_format
        resource.save(update_fields=['format'])


class Migration(migrations.Migration):

    dependencies = [
        ('vitrina_resources', '0003_alter_datasetdistribution_filename'),
    ]

    operations = [
        migrations.AlterField(
            model_name='datasetdistribution',
            name='url',
            field=models.TextField(blank=True, help_text='Tiesioginė duomenų atsisiuntimo nuoroda.', null=True,
                                   verbose_name='Atsisniuntimo nuoroda'),
        ),
        migrations.RenameField(
            model_name='datasetdistribution',
            old_name='url',
            new_name='download_url',
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='filename',
            field=models.FileField(blank=True,
                                   help_text='Atvirų duomenų katalogas nėra skirtas duomenų talpinimui'
                                             ' ir įprastinių atveju duomenys turėtu būti talpinami'
                                             ' atvirų duomenų Saugykloje ar kitoje vietoje, pateikiant'
                                             ' tiesioginę duomenų atsisiuntimo nuorodą. Tačiau nedidelės'
                                             ' apimties (iki 5Mb) duomenų failus, galima talpinti ir kataloge.',
                                   max_length=255, null=True, upload_to='data/', verbose_name='Duomenų failas'),
        ),
        migrations.RenameField(
            model_name='datasetdistribution',
            old_name='filename',
            new_name='file',
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='url_format',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='vitrina_resources.format', verbose_name='Šaltinio formatas'),
        ),
        migrations.RenameField(
            model_name='datasetdistribution',
            old_name='url_format',
            new_name='format',
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='access_url',
            field=models.CharField(blank=True, default='', help_text='Nuoroda į svetainę iš kurios galima atsisiųsti duomenis.',
                                   max_length=255, verbose_name='Prieigos nuoroda'),
            preserve_default=False,
        ),
        migrations.RunPython(delete_resources_with_dataset_null),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='dataset',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE,
                                    to='vitrina_datasets.dataset'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='description',
            field=models.TextField(blank=True, default='', verbose_name='Aprašymas'),
            preserve_default=False,
        ),
        migrations.RenameField(
            model_name='datasetdistribution',
            old_name='region',
            new_name='region_old',
        ),
        migrations.RenameField(
            model_name='datasetdistribution',
            old_name='municipality',
            new_name='municipality_old',
        ),
        migrations.AddField(
            model_name='datasetdistribution',
            name='municipality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='vitrina_orgs.municipality', verbose_name='Savivaldybė'),
        ),
        migrations.AddField(
            model_name='datasetdistribution',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='vitrina_orgs.region', verbose_name='Regionas'),
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='period_end',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Periodo pabaiga'),
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='period_start',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Periodo pradžia'),
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='title',
            field=models.CharField(default='', max_length=255, verbose_name='Pavadinimas'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='datasetdistribution',
            name='version',
            field=models.IntegerField(default=1),
        ),
        migrations.RunPython(remake_region_and_municipality),
        migrations.RemoveField(
            model_name='datasetdistribution',
            name='region_old',
        ),
        migrations.RemoveField(
            model_name='datasetdistribution',
            name='municipality_old',
        ),
        migrations.RunPython(fix_type_field_for_files)
    ]
